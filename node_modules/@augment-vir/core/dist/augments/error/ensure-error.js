import { combineErrorMessages, extractErrorMessage } from './error-message.js';
/**
 * Either returns the input if it's already an Error instance or converts it into an Error instance.
 *
 * @category Error
 * @category Package : @augment-vir/common
 * @package [`@augment-vir/common`](https://www.npmjs.com/package/@augment-vir/common)
 */
export function ensureError(maybeError) {
    if (maybeError instanceof Error) {
        return maybeError;
    }
    else {
        return new Error(extractErrorMessage(maybeError));
    }
}
/**
 * Ensures that the given input is an error and prepends the given message to the ensured Error
 * instance's message.
 *
 * @category Error
 * @category Package : @augment-vir/common
 * @package [`@augment-vir/common`](https://www.npmjs.com/package/@augment-vir/common)
 */
export function ensureErrorAndPrependMessage(maybeError, prependMessage) {
    const error = ensureError(maybeError);
    const combinedMessage = combineErrorMessages(prependMessage, error.message);
    try {
        /** Some error sub classes make `message` readonly. */
        error.message = combinedMessage;
        return error;
    }
    catch {
        return new Error(combinedMessage, { cause: maybeError });
    }
}
/**
 * Ensures that the given `originalError` is an instance of the given `errorClass`.
 *
 * - If it is, `originalError` is directly returned.
 * - If it is _not_, a new instance of `errorClass` is constructed with the given parameters.
 *
 * @category Error
 * @category Package : @augment-vir/common
 * @example
 *
 * ```ts
 * import {ensureErrorClass, extractErrorMessage} from '@augment-vir/common';
 *
 * class MyCustomError extends Error {
 *     public override readonly name = 'MyCustomError';
 * }
 *
 * try {
 *     // do some stuff
 * } catch (error) {
 *     throw ensureErrorClass(error, MyCustomError, extractErrorMessage(error));
 * }
 * ```
 *
 * @package [`@augment-vir/common`](https://www.npmjs.com/package/@augment-vir/common)
 */
export function ensureErrorClass(originalError, errorClass, ...params) {
    if (originalError instanceof errorClass) {
        return originalError;
    }
    else {
        return new errorClass(...params);
    }
}
