import { type PartialWithUndefined } from '@augment-vir/common';
import { ExtractEventByType, ExtractEventTypes } from './events/event-types.js';
import { RemoveListenerCallback, TypedEventListenerWithRemoval } from './listener.js';
/**
 * Extract event types from an already-defined `TypedListenTarget` instance or sub-class.
 *
 * @category Types
 */
export type EventTypesFromListenTarget<EventTargetGeneric extends TypedListenTarget<Event>> = EventTargetGeneric extends TypedListenTarget<infer InferredEventTypeGeneric> ? InferredEventTypeGeneric : never;
/**
 * Optional options for `TypedListenTarget.listen`.
 *
 * @category Types
 */
export type ListenOptions = PartialWithUndefined<{
    once: boolean;
}>;
type Listeners<PossibleEvents extends Readonly<Event>> = Partial<{
    [EventType in ExtractEventTypes<PossibleEvents>]: Map<TypedEventListenerWithRemoval<ExtractEventByType<PossibleEvents, EventType>>, {
        listener: TypedEventListenerWithRemoval<ExtractEventByType<PossibleEvents, EventType>>;
        removeListener: RemoveListenerCallback;
    }>;
}>;
/**
 * Similar to `TypedEventTarget` except that it uses a `listen` method to add listeners and that
 * method returns a callback to remove the attached listener rather than having a
 * `removeEventListener` method.
 *
 * @category Main
 */
export declare class TypedListenTarget<const PossibleEvents extends Readonly<Event> = never> {
    protected listeners: Listeners<PossibleEvents>;
    /**
     * Get a count of all currently attached listeners. If a listener is removed, it will no longer
     * be counted.
     */
    getListenerCount(): number;
    /**
     * Listen to an event.
     *
     * @returns A callback to remove the listener.
     */
    listen<const EventDefinition extends Readonly<{
        type: ExtractEventTypes<PossibleEvents>;
    }>>(eventDefinition: EventDefinition, listenerCallback: TypedEventListenerWithRemoval<ExtractEventByType<PossibleEvents, EventDefinition['type']>>, options?: ListenOptions | undefined): RemoveListenerCallback;
    /**
     * Listen to an event by its type string.
     *
     * @returns A callback to remove the listener.
     */
    listen<const EventType extends ExtractEventTypes<PossibleEvents>>(eventType: EventType, listenerCallback: TypedEventListenerWithRemoval<ExtractEventByType<PossibleEvents, EventType>>, options?: ListenOptions | undefined): RemoveListenerCallback;
    /** Removes a listener. */
    removeListener<const EventDefinition extends Readonly<{
        type: ExtractEventTypes<PossibleEvents>;
    }>>(eventDefinition: EventDefinition, listenerCallback: TypedEventListenerWithRemoval<ExtractEventByType<PossibleEvents, EventDefinition['type']>>): boolean;
    /** Removes a listener. */
    removeListener<const EventType extends ExtractEventTypes<PossibleEvents>>(eventType: EventType, listenerCallback: TypedEventListenerWithRemoval<ExtractEventByType<PossibleEvents, EventType>>): boolean;
    /**
     * Dispatch a typed event. Causes all attached listeners listening to this event to be fired.
     *
     * @returns The number of listeners that were fired.
     */
    dispatch(event: PossibleEvents): number;
    /**
     * Remove all currently attached event listeners.
     *
     * @returns The number of listeners that were removed.
     */
    removeAllListeners(): number;
    /** Remove all internal state to free up resources. */
    destroy(): void;
}
/**
 * An alias for `TypedListenTarget`.
 *
 * @category Main
 */
export declare class ListenTarget<const PossibleEvents extends Readonly<Event> = never> extends TypedListenTarget<PossibleEvents> {
}
export {};
