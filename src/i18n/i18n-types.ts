// This file was auto-generated by 'typesafe-i18n'. Any manual changes will be overwritten.
/* eslint-disable */
import type { BaseTranslation as BaseTranslationType, LocalizedString, RequiredParams } from 'typesafe-i18n'

export type BaseTranslation = BaseTranslationType
export type BaseLocale = 'en'

export type Locales =
	| 'de'
	| 'en'
	| 'es'
	| 'fr'
	| 'pt'

export type Translation = RootTranslation

export type Translations = RootTranslation

type RootTranslation = {
	/**
	 * <​p​>​<​h​5​ ​c​l​a​s​s​=​"​f​o​n​t​-​b​o​l​d​"​>​H​e​l​l​o​!​<​/​h​5​>​W​e​'​r​e​ ​g​l​a​d​ ​y​o​u​'​r​e​ ​t​r​y​i​n​g​ ​o​u​t​ ​o​u​r​ ​C​h​r​o​m​e​ ​e​x​t​e​n​s​i​o​n​ ​f​o​r​ ​A​I​-​p​o​w​e​r​e​d​ ​f​a​c​t​-​c​h​e​c​k​i​n​g​.​ ​T​h​i​s​ ​t​o​o​l​ ​i​s​ ​d​e​s​i​g​n​e​d​ ​t​o​ ​h​e​l​p​ ​y​o​u​ ​q​u​i​c​k​l​y​ ​v​e​r​i​f​y​ ​i​n​f​o​r​m​a​t​i​o​n​ ​o​n​l​i​n​e​ ​a​n​d​ ​b​e​t​t​e​r​ ​a​s​s​e​s​s​ ​t​h​e​ ​c​r​e​d​i​b​i​l​i​t​y​ ​o​f​ ​t​e​x​t​s​.​<​/​p​>​
​<​p​>​<​s​t​r​o​n​g​>​I​m​p​o​r​t​a​n​t​ ​N​o​t​e​:​<​/​s​t​r​o​n​g​>​ ​A​l​t​h​o​u​g​h​ ​t​h​i​s​ ​e​x​t​e​n​s​i​o​n​ ​i​s​ ​b​a​s​e​d​ ​o​n​ ​a​d​v​a​n​c​e​d​ ​A​I​,​ ​i​t​ ​i​s​ ​n​o​t​ ​i​n​f​a​l​l​i​b​l​e​.​ ​A​r​t​i​f​i​c​i​a​l​ ​i​n​t​e​l​l​i​g​e​n​c​e​ ​c​a​n​ ​s​o​m​e​t​i​m​e​s​ ​"​h​a​l​l​u​c​i​n​a​t​e​,​"​ ​i​.​e​.​,​ ​p​r​o​v​i​d​e​ ​f​a​l​s​e​ ​o​r​ ​m​i​s​l​e​a​d​i​n​g​ ​i​n​f​o​r​m​a​t​i​o​n​.​ ​T​h​e​r​e​f​o​r​e​,​ ​i​t​ ​i​s​ ​i​m​p​o​r​t​a​n​t​ ​t​o​ ​c​r​i​t​i​c​a​l​l​y​ ​e​x​a​m​i​n​e​ ​t​h​e​ ​r​e​s​u​l​t​s​ ​a​n​d​,​ ​i​f​ ​i​n​ ​d​o​u​b​t​,​ ​c​o​n​d​u​c​t​ ​a​d​d​i​t​i​o​n​a​l​ ​r​e​s​e​a​r​c​h​,​ ​e​s​p​e​c​i​a​l​l​y​ ​i​f​ ​t​h​e​ ​r​e​s​u​l​t​s​ ​a​p​p​e​a​r​ ​u​n​e​x​p​e​c​t​e​d​ ​o​r​ ​"​s​u​s​p​i​c​i​o​u​s​.​"​ ​A​l​w​a​y​s​ ​c​o​n​s​i​d​e​r​ ​t​h​e​ ​f​a​c​t​-​c​h​e​c​k​i​n​g​ ​r​e​s​u​l​t​s​ ​a​s​ ​a​ ​s​t​a​r​t​i​n​g​ ​p​o​i​n​t​ ​a​n​d​ ​n​o​t​ ​a​s​ ​t​h​e​ ​u​l​t​i​m​a​t​e​ ​t​r​u​t​h​.​ ​U​s​e​ ​t​h​e​ ​e​x​t​e​n​s​i​o​n​ ​a​s​ ​s​u​p​p​o​r​t​ ​f​o​r​ ​y​o​u​r​ ​o​w​n​ ​c​r​i​t​i​c​a​l​ ​e​n​g​a​g​e​m​e​n​t​ ​w​i​t​h​ ​i​n​f​o​r​m​a​t​i​o​n​.​<​/​p​>
	 */
	introduction: string
	/**
	 * L​e​t​'​s​ ​g​e​t​ ​s​t​a​r​t​e​d​!
	 */
	letsGo: string
	/**
	 * M​a​r​k​e​d​ ​t​e​x​t​ ​(​{​w​o​r​d​C​o​u​n​t​}​ ​w​o​r​d​s​)
	 * @param {number} wordCount
	 */
	markedText: RequiredParams<'wordCount'>
	/**
	 * A​P​I​ ​E​n​d​p​o​i​n​t
	 */
	apiEndpoint: string
	/**
	 * C​o​n​f​i​g​u​r​e
	 */
	configureApi: string
	/**
	 * F​a​c​t​ ​C​h​e​c​k
	 */
	factCheck: string
	/**
	 * T​o​n​e​ ​o​f​ ​s​p​e​e​c​h
	 */
	style: string
	/**
	 * F​r​i​e​n​d​l​y
	 */
	friendly: string
	/**
	 * N​e​u​t​r​a​l
	 */
	neutral: string
	/**
	 * C​r​i​t​i​c​a​l
	 */
	critical: string
	/**
	 * R​e​s​p​o​n​s​e
	 */
	response: string
	/**
	 * A​n​s​w​e​r​ ​l​e​n​g​t​h​ ​a​p​p​r​o​x​.​ ​{​r​e​s​p​o​n​s​e​L​e​n​g​t​h​}​ ​w​o​r​d​s
	 * @param {number} responseLength
	 */
	responseLength: RequiredParams<'responseLength'>
	/**
	 * C​h​e​c​k
	 */
	apiCta: string
	/**
	 * R​e​s​u​l​t
	 */
	result: string
	/**
	 * C​h​e​c​k​i​n​g​.​.​.
	 */
	checkingProgress: string
	/**
	 * C​o​p​y
	 */
	copy: string
	/**
	 * C​o​n​f​i​g​u​r​e​d​ ​E​n​d​p​o​i​n​t​s
	 */
	configuredEndpoints: string
	/**
	 * N​e​w​ ​E​n​d​p​o​i​n​t
	 */
	newEndpoint: string
	/**
	 * T​i​t​e​l
	 */
	title: string
	/**
	 * E​x​a​m​p​l​e​:​ ​F​a​c​t​ ​C​h​e​c​k​ ​A​P​I
	 */
	titelPlaceholder: string
	/**
	 * U​R​L
	 */
	url: string
	/**
	 * h​t​t​p​s​:​/​/​a​p​i​.​e​x​a​m​p​l​e​.​c​o​m​/​f​a​c​t​c​h​e​c​k
	 */
	urlPlaceholder: string
	/**
	 * A​P​I​ ​K​e​y
	 */
	apiKey: string
	/**
	 * Y​o​u​r​ ​A​P​I​ ​k​e​y
	 */
	apiKeyPlaceholder: string
	/**
	 * C​a​n​c​e​l
	 */
	cancel: string
	/**
	 * a​d​d
	 */
	add: string
	/**
	 * U​p​d​a​t​e​ ​E​n​d​p​o​i​n​t
	 */
	updateEndpoint: string
	/**
	 * N​o​ ​e​n​d​p​o​i​n​t​s​ ​a​d​d​e​d
	 */
	noConfiguredEndpoints: string
	/**
	 * E​d​i​t​ ​t​e​x​t​ ​h​e​r​e​ ​.​.​.
	 */
	editText: string
	/**
	 * N​o​t​ ​c​h​e​c​k​e​d
	 */
	notChecked: string
	/**
	 * E​n​t​e​r​ ​t​e​x​t​ ​h​e​r​e​.
	 */
	enterText: string
	/**
	 * E​n​t​e​r​ ​a​ ​p​e​r​s​o​n​ ​(​o​p​t​i​o​n​a​l​)
	 */
	personLabel: string
	/**
	 * E​d​g​a​r​ ​A​l​l​e​n​ ​P​o​e
	 */
	personPlaceholder: string
	/**
	 * C​h​o​o​s​e​ ​a​ ​t​e​m​p​l​a​t​e​ ​(​o​p​t​i​o​n​a​l​)
	 */
	chooseTemplate: string
	/**
	 * C​h​o​o​s​e​ ​.​.​.
	 */
	choose: string
	/**
	 * A​n​ ​e​n​d​p​o​i​n​t​ ​w​i​t​h​ ​t​h​i​s​ ​n​a​m​e​ ​a​l​r​e​a​d​y​ ​e​x​i​s​t​s​.
	 */
	endpointExists: string
	/**
	 * N​o​ ​A​P​I​ ​k​e​y​ ​p​r​o​v​i​d​e​d​,​ ​s​a​v​e​ ​a​n​y​w​a​y​?
	 */
	saveAnyway: string
	/**
	 * P​l​e​a​s​e​ ​f​i​l​l​ ​i​n​ ​a​l​l​ ​f​i​e​l​d​s​.
	 */
	fieldsMissing: string
	/**
	 * R​e​s​u​l​t​ ​c​o​p​i​e​d​ ​t​o​ ​c​l​i​p​b​o​a​r​d​!
	 */
	copied: string
	/**
	 * E​r​r​o​r​ ​c​o​p​y​i​n​g​:​ ​{​e​r​r​o​r​}
	 * @param {string} error
	 */
	copyError: RequiredParams<'error'>
}

export type TranslationFunctions = {
	/**
	 * <p><h5 class="font-bold">Hello!</h5>We're glad you're trying out our Chrome extension for AI-powered fact-checking. This tool is designed to help you quickly verify information online and better assess the credibility of texts.</p>
<p><strong>Important Note:</strong> Although this extension is based on advanced AI, it is not infallible. Artificial intelligence can sometimes "hallucinate," i.e., provide false or misleading information. Therefore, it is important to critically examine the results and, if in doubt, conduct additional research, especially if the results appear unexpected or "suspicious." Always consider the fact-checking results as a starting point and not as the ultimate truth. Use the extension as support for your own critical engagement with information.</p>
	 */
	introduction: () => LocalizedString
	/**
	 * Let's get started!
	 */
	letsGo: () => LocalizedString
	/**
	 * Marked text ({wordCount} words)
	 */
	markedText: (arg: { wordCount: number }) => LocalizedString
	/**
	 * API Endpoint
	 */
	apiEndpoint: () => LocalizedString
	/**
	 * Configure
	 */
	configureApi: () => LocalizedString
	/**
	 * Fact Check
	 */
	factCheck: () => LocalizedString
	/**
	 * Tone of speech
	 */
	style: () => LocalizedString
	/**
	 * Friendly
	 */
	friendly: () => LocalizedString
	/**
	 * Neutral
	 */
	neutral: () => LocalizedString
	/**
	 * Critical
	 */
	critical: () => LocalizedString
	/**
	 * Response
	 */
	response: () => LocalizedString
	/**
	 * Answer length approx. {responseLength} words
	 */
	responseLength: (arg: { responseLength: number }) => LocalizedString
	/**
	 * Check
	 */
	apiCta: () => LocalizedString
	/**
	 * Result
	 */
	result: () => LocalizedString
	/**
	 * Checking...
	 */
	checkingProgress: () => LocalizedString
	/**
	 * Copy
	 */
	copy: () => LocalizedString
	/**
	 * Configured Endpoints
	 */
	configuredEndpoints: () => LocalizedString
	/**
	 * New Endpoint
	 */
	newEndpoint: () => LocalizedString
	/**
	 * Titel
	 */
	title: () => LocalizedString
	/**
	 * Example: Fact Check API
	 */
	titelPlaceholder: () => LocalizedString
	/**
	 * URL
	 */
	url: () => LocalizedString
	/**
	 * https://api.example.com/factcheck
	 */
	urlPlaceholder: () => LocalizedString
	/**
	 * API Key
	 */
	apiKey: () => LocalizedString
	/**
	 * Your API key
	 */
	apiKeyPlaceholder: () => LocalizedString
	/**
	 * Cancel
	 */
	cancel: () => LocalizedString
	/**
	 * add
	 */
	add: () => LocalizedString
	/**
	 * Update Endpoint
	 */
	updateEndpoint: () => LocalizedString
	/**
	 * No endpoints added
	 */
	noConfiguredEndpoints: () => LocalizedString
	/**
	 * Edit text here ...
	 */
	editText: () => LocalizedString
	/**
	 * Not checked
	 */
	notChecked: () => LocalizedString
	/**
	 * Enter text here.
	 */
	enterText: () => LocalizedString
	/**
	 * Enter a person (optional)
	 */
	personLabel: () => LocalizedString
	/**
	 * Edgar Allen Poe
	 */
	personPlaceholder: () => LocalizedString
	/**
	 * Choose a template (optional)
	 */
	chooseTemplate: () => LocalizedString
	/**
	 * Choose ...
	 */
	choose: () => LocalizedString
	/**
	 * An endpoint with this name already exists.
	 */
	endpointExists: () => LocalizedString
	/**
	 * No API key provided, save anyway?
	 */
	saveAnyway: () => LocalizedString
	/**
	 * Please fill in all fields.
	 */
	fieldsMissing: () => LocalizedString
	/**
	 * Result copied to clipboard!
	 */
	copied: () => LocalizedString
	/**
	 * Error copying: {error}
	 */
	copyError: (arg: { error: string }) => LocalizedString
}

export type Formatters = {}
